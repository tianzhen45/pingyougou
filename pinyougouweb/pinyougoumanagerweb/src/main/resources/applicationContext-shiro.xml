<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 1. 配置shiro过滤器工厂 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 配置注入安全管理对象 -->
        <property name="securityManager" ref="securityManager"/>
        <!--
            配置登录页面访问URL
            没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，
            不输入地址的话会自动寻找项目web项目的根目录下的”/login.html页面
         -->
        <property name="loginUrl" value="/login.html"/>
        <!--
          配置过滤器链(配置顺序为自上而下)
          1. user: 过滤器只要用户登录(isRemembered()==true or isAuthenticated()==true)即可访问成功
          2. authc: 过滤器只要用户登录isAuthenticated()==true即可访问成功
          3. anon : 匿名访问，不需要登录
          4. logout : 安全退出
        -->
        <property name="filterChainDefinitions">
            <value>
                /css/** = anon
                /img/** = anon
                /js/** = anon
                /plugins/** = anon
                /user/login = anon
                /logout = logout
                /** = user
            </value>
        </property>

    </bean>

    <!--2. 配置安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 引用自定义的realm -->
        <property name="realm" ref="authRealm"/>
    </bean>

    <!--3. 配置自定义Realm域 -->
    <bean id="authRealm" class="com.tianzhen.manager.shiro.AuthRealm">
        <!-- 注入凭证匹配器-->
        <property name="credentialsMatcher" ref="credentialsMatcher" ></property>
    </bean>

    <!--4. 创建shiro提供的凭证匹配器，自动对用户输入的密码按照指定的算法加密-->
    <bean id="credentialsMatcher"
    class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    <property name="hashAlgorithmName" value="md5"/>
    </bean>



    <!--开启shiro注解支持-->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>